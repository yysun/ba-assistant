{
  "version": 3,
  "sources": ["../../pages/_data/prompts.ts"],
  "sourcesContent": ["export type Prompt = {\n  id: string;\n  name: string;\n  text: string;\n}\n\nexport class PromptService {\n  private STORAGE_KEY = 'ba-assistant-prompts';\n\n  private DEFAULT_PROMPTS: Prompt[] = [\n    {\n      id: crypto.randomUUID(),\n      name: 'User Story Map',\n      text: 'Help me create a user story map with the following structure:\\n\\nUser Activities (Top Level):\\n[Activities]\\n\\nUser Tasks (Second Level):\\n[Tasks]\\n\\nUser Stories (Details):\\n[Stories]\\n\\nContext:\\n[Project/Feature Context]'\n    },\n    {\n      id: crypto.randomUUID(),\n      name: 'Customer Journey Map',\n      text: 'Help me create a customer journey map with these components:\\n\\nPersona:\\n[Customer Type]\\n\\nStages:\\n[Journey Stages]\\n\\nActions:\\n[Customer Actions]\\n\\nThoughts & Feelings:\\n[Customer Experience]\\n\\nPain Points:\\n[Issues & Challenges]\\n\\nOpportunities:\\n[Potential Improvements]'\n    },\n    {\n      id: crypto.randomUUID(),\n      name: 'Page Navigations',\n      text: 'Help me design the page structure and navigation:\\n\\nSite Map:\\n[Page Hierarchy]\\n\\nNavigation Flow:\\n[User Navigation Paths]\\n\\nPage Components:\\n[Key UI Elements]\\n\\nInteraction Points:\\n[User Interactions]'\n    },\n    {\n      id: crypto.randomUUID(),\n      name: 'Page User Stories',\n      text: 'Help me define the page requirements and user stories:\\n\\nPage Purpose:\\n[Main Objectives]\\n\\nUser Stories:\\n[As a... I want... So that...]\\n\\nAcceptance Criteria:\\n[Criteria List]\\n\\nTechnical Notes:\\n[Implementation Details]'\n    },\n    {\n      id: crypto.randomUUID(),\n      name: 'Sprint Plan',\n      text: 'Help me create a sprint plan:\\n\\nSprint Goal:\\n[Objective]\\n\\nDeliverables:\\n[User Stories/Tasks]\\n\\nEstimates:\\n[Story Points/Time]\\n\\nDependencies:\\n[Blockers/Prerequisites]\\n\\nRisks:\\n[Potential Issues]'\n    }\n  ];\n\n  async loadPrompts(): Promise<Prompt[]> {\n    const stored = localStorage.getItem(this.STORAGE_KEY);\n    try {\n      const storedPrompts = stored ? JSON.parse(stored) : '';\n      return Array.isArray(storedPrompts) ? storedPrompts : this.DEFAULT_PROMPTS;\n    } catch (error) {\n      return this.DEFAULT_PROMPTS;\n    }\n  }\n\n  async savePrompts(prompts: Prompt[]): Promise<void> {\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(prompts));\n  }\n\n  async createPrompt(name: string, text: string): Promise<Prompt> {\n    const prompts = await this.loadPrompts();\n    const newPrompt = { id: crypto.randomUUID(), name, text };\n    prompts.push(newPrompt);\n    await this.savePrompts(prompts);\n    return newPrompt;\n  }\n\n  async updatePrompt(prompt: Prompt): Promise<void> {\n    const prompts = await this.loadPrompts();\n    const index = prompts.findIndex(p => p.id === prompt.id);\n    if (index >= 0) {\n      prompts[index] = prompt;\n      await this.savePrompts(prompts);\n    }\n  }\n\n  async deletePrompt(id: string): Promise<void> {\n    const prompts = await this.loadPrompts();\n    const filtered = prompts.filter(p => p.id !== id);\n    await this.savePrompts(filtered);\n  }\n}\n\nexport const promptService = new PromptService();\n\n"],
  "mappings": ";AAMO,IAAM,gBAAN,MAAoB;AAAA,EACjB,cAAc;AAAA,EAEd,kBAA4B;AAAA,IAClC;AAAA,MACE,IAAI,OAAO,WAAW;AAAA,MACtB,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,IAAI,OAAO,WAAW;AAAA,MACtB,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,IAAI,OAAO,WAAW;AAAA,MACtB,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,IAAI,OAAO,WAAW;AAAA,MACtB,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA;AAAA,MACE,IAAI,OAAO,WAAW;AAAA,MACtB,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,cAAiC;AACrC,UAAM,SAAS,aAAa,QAAQ,KAAK,WAAW;AACpD,QAAI;AACF,YAAM,gBAAgB,SAAS,KAAK,MAAM,MAAM,IAAI;AACpD,aAAO,MAAM,QAAQ,aAAa,IAAI,gBAAgB,KAAK;AAAA,IAC7D,SAAS,OAAO;AACd,aAAO,KAAK;AAAA,IACd;AAAA,EACF;AAAA,EAEA,MAAM,YAAY,SAAkC;AAClD,iBAAa,QAAQ,KAAK,aAAa,KAAK,UAAU,OAAO,CAAC;AAAA,EAChE;AAAA,EAEA,MAAM,aAAa,MAAc,MAA+B;AAC9D,UAAM,UAAU,MAAM,KAAK,YAAY;AACvC,UAAM,YAAY,EAAE,IAAI,OAAO,WAAW,GAAG,MAAM,KAAK;AACxD,YAAQ,KAAK,SAAS;AACtB,UAAM,KAAK,YAAY,OAAO;AAC9B,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,aAAa,QAA+B;AAChD,UAAM,UAAU,MAAM,KAAK,YAAY;AACvC,UAAM,QAAQ,QAAQ,UAAU,OAAK,EAAE,OAAO,OAAO,EAAE;AACvD,QAAI,SAAS,GAAG;AACd,cAAQ,KAAK,IAAI;AACjB,YAAM,KAAK,YAAY,OAAO;AAAA,IAChC;AAAA,EACF;AAAA,EAEA,MAAM,aAAa,IAA2B;AAC5C,UAAM,UAAU,MAAM,KAAK,YAAY;AACvC,UAAM,WAAW,QAAQ,OAAO,OAAK,EAAE,OAAO,EAAE;AAChD,UAAM,KAAK,YAAY,QAAQ;AAAA,EACjC;AACF;AAEO,IAAM,gBAAgB,IAAI,cAAc;",
  "names": []
}
